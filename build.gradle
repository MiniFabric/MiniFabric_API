plugins {
	id "maven-publish"
	id "java"
	id "org.ajoberstar.grgit" version "3.1.1"
}

version = project.mod_version
group = project.maven_group

@Grab('org.codehaus.groovy:groovy-xml:3.0.9')
import groovy.xml.MarkupBuilder

repositories {
	maven {
		name = "Fabric"
		url = "https://maven.fabricmc.net/"
	}
	maven {
		name = "jitpack"
		url = "https://jitpack.io"
	}
	maven {
		name = "MiniFabric"
		url = "https://repo.repsy.io/mvn/distant/minifabric/"
	}
	mavenCentral()
}

def getSubprojectVersion(project, version) {
	if (grgit == null) {
		return version + "+nogit"
	}
	def latestCommits = grgit.log(paths: [rootProject.projectDir.toPath().relativize(project.projectDir.toPath() as java.nio.file.Path).toString()], maxCommits: 1)
	if (latestCommits.isEmpty()) {
		return version + "+uncommited"
	} else {
		return version + "+" + latestCommits.get(0).id.substring(0, 8) + DigestUtils.sha256Hex("${project.mc_version}").substring(0, 2)
	}
}

dependencies {
	implementation "com.github.MinicraftPlus:minicraft-plus-revived:${project.minicraftplus_version}"
	implementation "io.github.pseudodistant:MinicraftGameProvider:${project.provider_version}"
	implementation "net.fabricmc:fabric-loader:${project.loader_version}"
	implementation "org.tinylog:tinylog-api:2.4.1"
	implementation "org.tinylog:tinylog-impl:2.4.1"
	implementation "org.jetbrains:annotations:22.0.0"
	implementation "net.fabricmc:sponge-mixin:0.11.0+mixin.0.8.5"
	implementation "net.fabricmc:access-widener:2.1.0"
	implementation "com.fasterxml.jackson.core:jackson-databind:2.13.1"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 16
}

java {
	withSourcesJar()
}

sourcesJar {

}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

task copyMod {
	doLast {
		copy {
			from jar
			into "mods"
		}
	}
}

build.dependsOn copyMod

task setupIdeaWorkspace {
	doLast {
		project.file(".idea/runConfigurations").mkdirs()

		def writer = new FileWriter(new File(".idea/runConfigurations/Launch_Client.xml"))
		def xml = new MarkupBuilder(writer)
		def jarPath = "-Dfabric.gameJarPath=\"" + configurations.compileClasspath[0] + "\""

		xml.component(name: "ProjectRunConfigurationManager") {
			configuration(default: "false", name: "Launch Client", type: "Application", factoryName: "Application") {
				option(name: "ALTERNATIVE_JRE_PATH", value: "17")
				option(name: "ALTERNATIVE_JRE_PATH_ENABLED", value: "true")
				option(name: "MAIN_CLASS_NAME", value: "net.fabricmc.loader.impl.launch.knot.KnotClient")
				option(name: "VM_PARAMETERS", value: jarPath)
				module(name: "minifabric-api.main")
				method(v: "2") {
					option(name: "Gradle.BeforeRunTask", enabled: "true", tasks: "build", externalProjectPath: "\$PROJECT_DIR\$", vmOptions: "", scriptParameters: "")
				}
			}
		}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
